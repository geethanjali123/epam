import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;


public class Solution {

    // Complete the prims function below.\\
    static class node1 {
        int dest;
        int weight; 
        node1(int a, int b) 
        { 
            dest = a; 
            weight = b; 
        } 
    } 
    static class node { 
        int vertex; 
        int key; 
    } 
   static class comparator implements Comparator<node> { 
        public int compare(node node0, node node1) 
        { 
            return node0.key - node1.key; 
        } 
    } 
  
    static int prims(int n, int[][] edges, int start) {
         int i;
        ArrayList<ArrayList<node1>> a=new ArrayList<ArrayList<node1>>();
        for(i=0;i<=n;i++)
        {
            a.add(i,new ArrayList<node1>());
        }
        int [][]g=new int[n][n];
        for(i=0;i<edges.length;i++)
        {
            int src=edges[i][0]-1;
            int dest=edges[i][1]-1;
            int weight=edges[i][2];
            g[src][dest]=weight;
            g[dest][src]=weight;
        }
        for(i=0;i<edges.length;i++)
        {
            int src=edges[i][0]-1;
            int dest=edges[i][1]-1;
            int weight=edges[i][2];
        node1 node0 = new node1(dest, weight); 
        node1 node = new node1(src, weight); 
        a.get(src).add(node0);
        a.get(dest).add(node);
        }
         Boolean[] mstset = new Boolean[n]; 
        node[] e = new node[n]; 
        int[] parent = new int[n]; 
        for (int o = 0; o <n; o++) 
            e[o] = new node(); 
        for (int o = 0; o <n; o++) { 
            mstset[o] = false;
            e[o].key = Integer.MAX_VALUE; 
            e[o].vertex = o; 
            parent[o] = -1; 
        } 
        mstset[0] = true; 
        e[0].key = 0; 
        PriorityQueue<node> queue = new PriorityQueue<>(n, new comparator()); 
        for (int o = 0; o <n; o++) 
            queue.add(e[o]); 
        while (!queue.isEmpty()) { 
            node node0 = queue.poll(); 
            mstset[node0.vertex] = true; 
            for (node1 iterator : a.get(node0.vertex)) { 
                if (mstset[iterator.dest] == false) { 
                    if (e[iterator.dest].key > iterator.weight) { 
                        queue.remove(e[iterator.dest]); 
                        e[iterator.dest].key = iterator.weight; 
                        queue.add(e[iterator.dest]); 
                        parent[iterator.dest] = node0.vertex; 
                    } 
                } 
            } 
        }
        int z=0; 
        for (int o = 1; o <n; o++) 
            z+=g[parent[o]][o];
        return z;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nm = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nm[0]);

        int m = Integer.parseInt(nm[1]);

        int[][] edges = new int[m][3];

        for (int i = 0; i < m; i++) {
            String[] edgesRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int j = 0; j < 3; j++) {
                int edgesItem = Integer.parseInt(edgesRowItems[j]);
                edges[i][j] = edgesItem;
            }
        }

        int start = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int result = prims(n, edges, start);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
