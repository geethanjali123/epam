import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {

    /*
     * Complete the rustMurdered function below.
     */
    static void bfs(int s, ArrayList<ArrayList<Integer>> list,boolean [] visited,int [] dis)
    {
        
        LinkedList<Integer> queue = new LinkedList<Integer>();
        visited[s]=true; 
        queue.add(s);
        queue.add(-1);
        dis[s]=-1;
        int d=list.size()-2;
        int count=1;
        while(queue.size()>1 && d>0)
        {
            int p = queue.poll();
            if(p==-1)
            {
                count+=1;
                 queue.add(-1);
            }
            else
            {
                int i;
              for(i=1;i<list.size();i++)
              {
                  if(!list.get(p).contains(i))
                  {  
                    if(!visited[i]) 
                    { 
                        visited[i]=true; 
                        d=d-1;
                        queue.add(i); 
                        dis[i]=count;
                    } 
                }
              }
            
           
            }
        }
            
        }
    
    static int[] rustMurderer(int n, int[][] cities,int s) {
         
        /*
         * Write your code here.
         */
         int i;
        ArrayList<ArrayList<Integer>> a=new ArrayList<ArrayList<Integer>>();
        for(i=0;i<=n;i++)
        {
            a.add(i,new ArrayList<Integer>());
        }
        
        for(i=0;i<cities.length;i++)
        {
                a.get(cities[i][0]).add(cities[i][1]);
                a.get(cities[i][1]).add(cities[i][0]);
        }
        boolean [] vis=new boolean[n+1];
        int [] dist=new int[n+1]; 
        bfs(s,a,vis,dist);
        int [] lm=new int[n-1];
        int y=0;
        for(i=1;i<dist.length;i++)
        {
           if(i!=s)
           {
               if(dist[i]!=0)
               lm[y++]=dist[i];
               else if(dist[i]==0)
               lm[y++]=-1;
           }
        }
        return lm;

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(scanner.nextLine().trim());

        for (int tItr = 0; tItr < t; tItr++) {
            String[] nm = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nm[0].trim());

            int m = Integer.parseInt(nm[1].trim());

            int[][] roads = new int[m][2];

            for (int roadsRowItr = 0; roadsRowItr < m; roadsRowItr++) {
                String[] roadsRowItems = scanner.nextLine().split(" ");

                for (int roadsColumnItr = 0; roadsColumnItr < 2; roadsColumnItr++) {
                    int roadsItem = Integer.parseInt(roadsRowItems[roadsColumnItr].trim());
                    roads[roadsRowItr][roadsColumnItr] = roadsItem;
                }
            }

            int s = Integer.parseInt(scanner.nextLine().trim());

            int[] result = rustMurderer(n, roads,s);

            for (int resultItr = 0; resultItr < result.length; resultItr++) {
                bufferedWriter.write(String.valueOf(result[resultItr]));

                if (resultItr != result.length - 1) {
                    bufferedWriter.write(" ");
                }
            }

            bufferedWriter.newLine();
        }

        bufferedWriter.close();
    }
}
