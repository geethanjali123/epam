import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the roadsAndLibraries function below.
    static long cost=0;
    static void dfs(int s,ArrayList<ArrayList<Integer>> list,boolean []vis,int c_road)
    {
        vis[s]=true;
        Iterator<Integer> i = list.get(s).listIterator();
        while(i.hasNext())
        {
            int n=i.next();
            if(!vis[n])
            {
                cost+=c_road;
                dfs(n,list,vis,c_road);
            }
        }
    }
    static long roadsAndLibraries(int n, int c_lib, int c_road, int[][] cities) {
        if(c_road>c_lib)
            return (long)c_lib*n;
        else
        {
            int i;
           ArrayList<ArrayList<Integer>> a=new ArrayList<ArrayList<Integer>>();
        for(i=0;i<=n;i++)
        {
            a.add(i,new ArrayList<Integer>());
        }
        
        for(i=0;i<cities.length;i++)
        {
                a.get(cities[i][0]).add(cities[i][1]);
                a.get(cities[i][1]).add(cities[i][0]);
        }
           
            boolean []vis=new boolean[n+1];
    
            for(i=0;i<=n;i++)
                vis[i]=false;
            for(i=1;i<=n;i++)
            {
                if(!vis[i])
                {
                    cost+=c_lib;
                    dfs(i,a,vis,c_road);
                }
            }
            return cost;
        }

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String[] nmC_libC_road = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nmC_libC_road[0]);

            int m = Integer.parseInt(nmC_libC_road[1]);

            int c_lib = Integer.parseInt(nmC_libC_road[2]);

            int c_road = Integer.parseInt(nmC_libC_road[3]);

            int[][] cities = new int[m][2];

            for (int i = 0; i < m; i++) {
                String[] citiesRowItems = scanner.nextLine().split(" ");
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

                for (int j = 0; j < 2; j++) {
                    int citiesItem = Integer.parseInt(citiesRowItems[j]);
                    cities[i][j] = citiesItem;
                }
            }

            long result = roadsAndLibraries(n, c_lib, c_road, cities);
            cost=0;

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
